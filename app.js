const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const PDFDocument = require('pdfkit');
const mongoose = require('mongoose');
const QRCode = require('qrcode');
const moment = require('moment');
const axios = require('axios');

const { token, adminBotToken, adminChatId } = require('./config');
const { fontPath, databaseURL } = require('./config');

const bot = new TelegramBot(token, { polling: true });

mongoose.connect(databaseURL, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB'))
  .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err));

const { Clients, Security, Fences, Repair } = require('./models');

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const { first_name: firstName } = msg.from;
  const opts = {
    reply_markup: {
      inline_keyboard: [[
        {
          text: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è',
          callback_data: 'register'
        }
      ]]
    }
  };
  bot.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç, ${firstName} üëãüèº! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", —â–æ–± –ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. üñá`, opts);
});

//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const name = query.message.chat.first_name;
  //–∫–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (data === 'register') {
    bot.sendMessage(chatId, '–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤ —Å–≤—ñ–π –Ω–æ–º–µ—Ä, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. ‚úåüèº', {
      reply_markup: {
        keyboard: [
          [{
            text: '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
            request_contact: true
          }]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
  }
  //–∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Ç–∏
  else if (data === 'catalog_security') {
    const chatId = query.message.chat.id;
    try {
      const securityObjects = await Security.find();
      if (securityObjects && securityObjects.length > 0) {
        securityObjects.forEach(async (object) => {
          const exchangeRate = await getExchangeRate();
          if (exchangeRate) {
            const priceInUAH = object.price * exchangeRate;

            const response = `*ID:* \`${object._id}\`\n*–ù–∞–∑–≤–∞:* ${object.name}\n*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* ${object.category}\n*–û–ø–∏—Å:* ${object.description}`;
            const options = {
              reply_markup: {
                inline_keyboard: [
                  [{ text: `–î–æ –∫–æ—à–∏–∫—É üõí ${priceInUAH.toFixed(0)} –≥—Ä–Ω`, callback_data: `security_object_${object._id}` }]
                ]
              }
            };
            bot.sendPhoto(chatId, object.image, { caption: response, parse_mode: 'Markdown', reply_markup: options.reply_markup });
          } else {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.');
          }
        });
      } else {
        bot.sendMessage(chatId, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–±\'—î–∫—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏. üòê');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±\'—î–∫—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏:', error);
      bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–±\'—î–∫—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏ üôÅ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
    }
  }
  //–∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è
  else if (data === 'catalog_fences') {
    const chatId = query.message.chat.id;
    try {
      const fencesObjects = await Fences.find();
      if (fencesObjects && fencesObjects.length > 0) {
        fencesObjects.forEach(async object => {
          const exchangeRate = await getExchangeRate();
          if (exchangeRate) {
            const priceInUAH = object.price * exchangeRate;
            const response = `*ID:* ${object._id}\n*–ù–∞–∑–≤–∞:* ${object.name}\n*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* ${object.category}\n*–ö—Ä–æ–∫:* ${object.step}\n*–û–ø–∏—Å:* ${object.description}`;
            const options = {
              reply_markup: {
                inline_keyboard: [
                  [{ text: `–î–æ –∫–æ—à–∏–∫—É üõí ${priceInUAH.toFixed(0)} –≥—Ä–Ω`, callback_data: `fences_object_${object._id}` }]
                ]
              }
            };
            await bot.sendPhoto(chatId, object.image, { caption: response, parse_mode: 'Markdown', reply_markup: options.reply_markup });
          } else {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.');
          }
        });
      } else {
        bot.sendMessage(chatId, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–≥–æ—Ä–æ–∂. üòê');
      }

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ—Ä–æ–∂:', error);
      bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–≥–æ—Ä–æ–∂ üòî –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
    }
  }
  else if (data === 'catalog_fences') {
    const chatId = query.message.chat.id;
    try {
      const fencesObjects = await Fences.find();
      if (fencesObjects && fencesObjects.length > 0) {
        fencesObjects.forEach(async object => {
          const exchangeRate = await getExchangeRate();
          if (exchangeRate) {
            const priceInUAH = object.price * exchangeRate;
            const response = `*ID:* ${object._id}\n*–ù–∞–∑–≤–∞:* ${object.name}\n*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* ${object.category}\n*–ö—Ä–æ–∫:* ${object.step}\n*–û–ø–∏—Å:* ${object.description}`;
            const options = {
              reply_markup: {
                inline_keyboard: [
                  [{ text: `–î–æ –∫–æ—à–∏–∫—É üõí ${priceInUAH.toFixed(0)} –≥—Ä–Ω`, callback_data: `fences_object_${object._id}` }]
                ]
              }
            };
            await bot.sendPhoto(chatId, object.image, { caption: response, parse_mode: 'Markdown', reply_markup: options.reply_markup });
          } else {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.');
          }
        });
      } else {
        bot.sendMessage(chatId, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–≥–æ—Ä–æ–∂.');
      }
    }
    catch {
      bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å–ª—É–≥ —Ä–µ–º–æ–Ω—Ç—É üôÑ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }
  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
  else if (data.startsWith('security_object_')) {
    const productId = data.split('_')[2];
    if (!shoppingCarts[chatId]) {
      shoppingCarts[chatId] = [];
    }
    shoppingCarts[chatId].push(productId);
    bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.');
  }
  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
  else if (data.startsWith('fences_object_')) {
    const productId = data.split('_')[2];
    if (!shoppingCarts[chatId]) {
      shoppingCarts[chatId] = [];
    }
    shoppingCarts[chatId].push(productId);
    bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.');
  }
  //—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  else if (data === 'order') {
    if (!shoppingCarts[chatId] || shoppingCarts[chatId].length === 0) {
      bot.sendMessage(chatId, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.');
      return;
    }

    let message = '–í–∞—à –∫–æ—à–∏–∫:\n';
    for (const productId of shoppingCarts[chatId]) {
      let product;
      try {
        product = await Security.findById(productId);
        if (!product) {
          product = await Fences.findById(productId);
        }
        if (product) {
          const exchangeRate = await getExchangeRate();
          if (exchangeRate) {
            const priceInUAH = product.price * exchangeRate;
            message += `–ù–∞–∑–≤–∞: ${product.name}\n–¶—ñ–Ω–∞: ${priceInUAH.toFixed(0)} –≥—Ä–Ω\n\n`;
          }
        } else {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.');
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä:', error);
      }
    }

    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'change_order' }],
          [{ text: '–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–∫–∞–∑', callback_data: 'accept_order' }]
        ]
      }
    });
  }
  //–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–æ—á–∏—Å–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã)
  else if (data === 'change_order') {
    shoppingCarts[chatId] = [];
    bot.sendMessage(chatId, '–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–∏–π.');
  }
  //—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–î–§ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω –±–æ—Ç—É
  else if (data === 'accept_order') {
    try {
      const pdfDoc = new PDFDocument({ margin: 50, font: fontPath });
      const writeStream = fs.createWriteStream(`order_${chatId}.pdf`);
      pdfDoc.pipe(writeStream);

      const targetURL = `tg://user?id=${chatId}`;
      const qrCodeImageBuffer = await QRCode.toBuffer(targetURL);

      const startX = pdfDoc.page.width - 150;
      const startY = 50;

      pdfDoc.image(qrCodeImageBuffer, startX, startY, { fit: [100, 100], align: 'right' });
      pdfDoc.text(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${chatId}\n\n`, 50, startY);

      let totalPrice = 0;

      const exchangeRate = await getExchangeRate();
      if (exchangeRate) {
        for (const productId of shoppingCarts[chatId]) {
          const product = await getProductById(productId);
          if (product) {
            const priceInUAH = product.price * exchangeRate;
            totalPrice += priceInUAH
            pdfDoc.text(`–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: ${product.name}\n–¶—ñ–Ω–∞: ${priceInUAH.toFixed(0)} –≥—Ä–Ω\n\n`);
          }
        }
      } else {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.');
      }

      pdfDoc.text(`–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalPrice.toFixed(0)} –≥—Ä–Ω\n\n`);

      const formattedDate = moment(new Date()).locale('ru').format('DD.MM.YYYY, HH:mm:ss');

      const existingClient = await Clients.findOne({ userId: chatId });
      if (existingClient) {
        const phone_number = existingClient.phoneNumber;
        pdfDoc.text(`–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞–º–æ–≤–Ω–∏–∫–∞: ${phone_number}`);
        pdfDoc.text(`–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${formattedDate}`)
      } else {
        console.log("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        pdfDoc.text(`–ö–ª—ñ—î–Ω—Ç –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π`);
      }

      pdfDoc.end();

      writeStream.on('finish', async () => {
        for (const productId of shoppingCarts[chatId]) {
          addToDatabase(productId, chatId, chatId);
        }
        shoppingCarts[chatId] = [];
        bot.sendDocument(chatId, `order_${chatId}.pdf`, {
          caption: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ–º—É PDF-—Ñ–∞–π–ª—ñ.'
        });

        const userLink = `<a href="tg://user?id=${chatId}">${name}</a>`;

        const response = await axios.post(`https://api.telegram.org/bot${adminBotToken}/sendDocument`, {
          chat_id: adminChatId,
          document: fs.createReadStream(`order_${chatId}.pdf`),
          caption: `–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLink}\n`,
          parse_mode: 'HTML',
        }, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });

        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', response.data);

        bot.sendMessage(chatId, '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ó –≤–∞–º–∏ –∑–≤\'—è–∂—É—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.')
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–∫–∞–∑—É:', error);
      bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–∫–∞–∑—É.');
    }
  }
});

bot.onText(/^(–ö–∞—Ç–∞–ª–æ–≥ üîé)$/i, async (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–ë–µ–∑–ø–µ–∫–∞', callback_data: 'catalog_security' },
          { text: '–û–≥–æ—Ä–æ–¥–∂–µ–Ω–Ω—è', callback_data: 'catalog_fences' }
        ]
      ]
    }
  };
  bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–∞—Ç–∞–ª–æ–≥—É:', options);
});

bot.onText(/^(–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úçÔ∏è)$/i, async (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;

  try {
    const response = await axios.post(`https://api.telegram.org/bot${adminBotToken}/sendMessage`, {
      chat_id: adminChatId,
      text: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:\n${messageText}`,
    });

    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', response.data);

    bot.sendMessage(chatId, '–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—å!');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});

bot.onText(/^(–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìã)$/i, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const client = await Clients.findOne({ userId: chatId });

    if (client) {
      const orders = client.orders;

      if (orders.length > 0) {
        let message = '–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n';
        orders.forEach((order, index) => {
          const formattedDate = moment(order.date).locale('ru').format('DD.MM.YYYY, HH:mm:ss');

          message += `${index + 1}. –ù–∞–∑–≤–∞: ${order.name}\n–¶—ñ–Ω–∞: ${order.price} –≥—Ä–Ω\n–î–∞—Ç–∞: ${formattedDate}\n\n`;
        });

        bot.sendMessage(chatId, message);
      } else {
        bot.sendMessage(chatId, '–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.');
      }
    } else {
      bot.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, –≤–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å.');
  }
});

bot.onText(/^(–ö–æ—à–∏–∫ üõí)$/i, async (msg) => {
  const chatId = msg.chat.id;
  if (!shoppingCarts[chatId] || shoppingCarts[chatId].length === 0) {
    bot.sendMessage(chatId, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.');
    return;
  }

  let cartContent = '';
  for (const productId of shoppingCarts[chatId]) {
    let product;
    try {
      product = await Security.findById(productId);
      if (!product) {
        product = await Fences.findById(productId);
      }
      if (product) {
        const exchangeRate = await getExchangeRate();
        if (exchangeRate) {
          const priceInUAH = product.price * exchangeRate;
          cartContent += `–ù–∞–∑–≤–∞: ${product.name}\n–¶—ñ–Ω–∞: ${priceInUAH.toFixed(0)} –≥—Ä–Ω\n\n`;
        }
        else {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.');
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä:', error);
    }
  }

  try {
    bot.sendMessage(chatId, cartContent);
    bot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'order' }]
        ]
      }
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});
//–ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
async function getProductById(productId) {
  try {
    let product = await Security.findById(productId);
    if (!product) {
      product = await Fences.findById(productId);
    }
    return product;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ:', error);
    throw error;
  }
}
//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async function addToDatabase(productId, chatId) {
  try {
    let product = await Security.findById(productId);
    if (!product) {
      product = await Fences.findById(productId);
    }
    if (product) {
      const order = {
        name: product.name,
        price: product.price,
        date: new Date()
      };

      console.log('–ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç:', product);

      const client = await Clients.findOne({ userId: chatId });
      console.log('–ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç:', client);

      client.orders.push(order);
      console.log('–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞:', client);

      await client.save();
      console.log('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', client);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
    throw error;
  }
}
//–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ (–∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º 
bot.on('contact', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;
  const phoneNumber = msg.contact.phone_number;
  const firstName = msg.contact.first_name;
  const lastName = msg.contact.last_name;

  try {
    const existingClient = await Clients.findOne({ userId: userId });

    if (existingClient) {
      bot.deleteMessage(chatId, msg.message_id);
      bot.sendMessage(chatId, '–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.', {
        reply_markup: {
          keyboard: [
            [
              { text: '–ö–∞—Ç–∞–ª–æ–≥ üîé', callback_data: 'catalog' },
              { text: '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úçÔ∏è', callback_data: 'leave_message' }
            ],
            [
              { text: '–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìã', callback_data: 'my_orders' },
              { text: '–ö–æ—à–∏–∫ üõí', callback_data: 'cart' }
            ]
          ],
          resize_keyboard: true
        }
      });
      return;
    }

    const newClientData = {
      userId: userId,
      username: username || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      phoneNumber: phoneNumber || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      firstName: firstName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      lastName: lastName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      orders: []
    };

    const newClient = new Clients(newClientData);

    await newClient.save();

    console.log('–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:', newClient);

    bot.sendMessage(chatId, '–î—è–∫—É—î–º–æ, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –Ω–∞—Å.', {
      reply_markup: {
        keyboard: [
          [
            { text: '–ö–∞—Ç–∞–ª–æ–≥ üîé', callback_data: 'catalog' },
            { text: '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úçÔ∏è', callback_data: 'leave_message' }
          ],
          [
            { text: '–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìã', callback_data: 'my_orders' },
            { text: '–ö–æ—à–∏–∫ üõí', callback_data: 'cart' }
          ]
        ],
        resize_keyboard: true
      }
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞:', error);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: {
        remove_keyboard: true
      }
    });
  }
});
//–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
const getExchangeRate = async () => {
  try {
    const response = await axios.get('https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json');
    const usdRate = response.data.find(currency => currency.cc === 'USD');
    return usdRate.rate;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞:', error);
    return null;
  }
};