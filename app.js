const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const mongoose = require('mongoose');

const token = '6256350860:AAG4zBfGIcP1mNEimo4hyTZ9Yoiz6ndm-Ok';

const bot = new TelegramBot(token, { polling: true });

mongoose.connect('mongodb+srv://admin:123zxc34@cluster0.hoxv5bc.mongodb.net/crossplace', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB'))
  .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err));

const clientSchema = new mongoose.Schema({
  userId: Number,
  username: String,
  phoneNumber: String,
  firstName: String,
  lastName: String,
  orders: [String]
});
const Clients = mongoose.model('clients', clientSchema);

const securitySchema = new mongoose.Schema({
  name: String,
  category: String,
  price: Number,
  description: String,
  image: String
});
const Security = mongoose.model('security', securitySchema);

const fencesSchema = new mongoose.Schema({
  name: String,
  category: String,
  price: Number,
  description: String,
  image: String,
  step: Number
});
const Fences = mongoose.model('fences', fencesSchema);
const shoppingCarts = {};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const name = msg.from.first_name;
  const opts = {
    reply_markup: {
      inline_keyboard: [[
        {
          text: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è',
          callback_data: 'register'
        }
      ]]
    }
  };
  bot.sendMessage(chatId, `–ü—Ä–∏–≤—ñ—Ç, ${name}üëã! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", —â–æ–± –ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.`, opts);
});


bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === 'register') {
    bot.sendMessage(chatId, '–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤ —Å–≤—ñ–π –Ω–æ–º–µ—Ä, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.', {
      reply_markup: {
        keyboard: [
          [{
            text: '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
            request_contact: true
          }]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
  }
  else if (data === 'catalog_security') {
    const chatId = query.message.chat.id;
    try {
      const securityObjects = await Security.find();
      if (securityObjects && securityObjects.length > 0) {
        securityObjects.forEach((object) => {
          const response = `*ID:* ${object._id}\n*–ù–∞–∑–≤–∞:* ${object.name}\n*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* ${object.category}\n*–¶—ñ–Ω–∞:* ${object.price} –≥—Ä–Ω\n*–û–ø–∏—Å:* ${object.description}`;
          const options = {
            reply_markup: {
              inline_keyboard: [
                [{ text: `–î–æ –∫–æ—à–∏–∫—É üõí\n${object.name}`, callback_data: `security_object_${object._id}` }]
              ]
            }
          };
          bot.sendPhoto(chatId, object.image, { caption: response, parse_mode: 'Markdown', reply_markup: options.reply_markup });
        });
      } else {
        bot.sendMessage(chatId, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–±\'—î–∫—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏.');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±\'—î–∫—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏:', error);
      bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–±\'—î–∫—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏.');
    }



  }
  else if (data === 'catalog_fences') {
    const chatId = query.message.chat.id;
    try {
      const fencesObjects = await Fences.find();
      if (fencesObjects && fencesObjects.length > 0) {
        fencesObjects.forEach(async object => {
          const response = `*–ù–∞–∑–≤–∞:* ${object.name}\n*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* ${object.category}\n*–¶—ñ–Ω–∞:* ${object.price} –≥—Ä–Ω\n*–ö—Ä–æ–∫:* ${object.step}\n*–û–ø–∏—Å:* ${object.description}`;
          const options = {
            reply_markup: {
              inline_keyboard: [
                [{ text: `–î–æ –∫–æ—à–∏–∫—É üõí\n${object.name}`, callback_data: `security_object_${object._id}` }]
              ]
            }
          };
          await bot.sendPhoto(chatId, object.image, { caption: response, parse_mode: 'Markdown', reply_markup: options.reply_markup });
        });
      } else {
        bot.sendMessage(chatId, '–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–≥–æ—Ä–æ–∂.');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ—Ä–æ–∂:', error);
      bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–≥–æ—Ä–æ–∂.');
    }
  }


  else if (data.startsWith('security_object_')) {
    const productId = data.split('_')[2];
    if (!shoppingCarts[chatId]) {
      shoppingCarts[chatId] = [];
    }
    shoppingCarts[chatId].push(productId);
    bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.');
  }

  else if (data === 'order') {
    const chatId = msg.chat.id;
    if (!shoppingCarts[chatId] || shoppingCarts[chatId].length === 0) {
      bot.sendMessage(chatId, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.');
      return;
    }

    let message = '–í–∞—à –∫–æ—à–∏–∫:\n';
    for (const productId of shoppingCarts[chatId]) {
      let product;
      try {
        product = await Security.findById(productId);
        if (!product) {
          product = await Fences.findById(productId);
        }
        if (product) {
          message += `–ù–∞–∑–≤–∞: ${product.name}\n–¶—ñ–Ω–∞: ${product.price} –≥—Ä–Ω\n\n`;
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä:', error);
      }
    }
    bot.sendMessage(chatId, message);
  }
});

bot.onText(/^(–ö–∞—Ç–∞–ª–æ–≥)$/i, async (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–ë–µ–∑–ø–µ–∫–∞', callback_data: 'catalog_security' },
          { text: '–û–≥–æ—Ä–æ–¥–∂–µ–Ω–Ω—è', callback_data: 'catalog_fences' }
        ]
      ]
    }
  };
  bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∫–∞—Ç–∞–ª–æ–≥—É:', options);
});
bot.onText(/^(–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úçÔ∏è)$/i, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, —Ñ—É–Ω–∫—Ü—ñ—è "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.');
});
bot.onText(/^(–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìã)$/i, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, —Ñ—É–Ω–∫—Ü—ñ—è "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è" —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.');
});
bot.onText(/^(–ö–æ—à–∏–∫ üõí)$/i, async (msg) => {
  const chatId = msg.chat.id;
  if (!shoppingCarts[chatId] || shoppingCarts[chatId].length === 0) {
    bot.sendMessage(chatId, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.');
    return;
  }

  let cartContent = '';
  for (const productId of shoppingCarts[chatId]) {
    let product;
    try {
      product = await Security.findById(productId);
      if (!product) {
        product = await Fences.findById(productId);
      }
      if (product) {
        cartContent += `–ù–∞–∑–≤–∞: ${product.name}\n–¶—ñ–Ω–∞: ${product.price} –≥—Ä–Ω\n\n`;
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä:', error);
    }
  }

  try {
    const userId = msg.from.id;
    const existingClient = await Clients.findOneAndUpdate(
      { userId: userId },
      { $push: { orders: cartContent } },
      { new: true }
    );

    if (existingClient) {
      bot.sendMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.');
      shoppingCarts[chatId] = []; 
    } else {
      bot.sendMessage(chatId, '–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å-–ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö:', error);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});



bot.on('contact', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;
  const phoneNumber = msg.contact.phone_number;
  const firstName = msg.contact.first_name;
  const lastName = msg.contact.last_name;

  try {
    const existingClient = await Clients.findOne({ userId: userId });

    if (existingClient) {
      bot.deleteMessage(chatId, msg.message_id);
      bot.sendMessage(chatId, '–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.', {
        reply_markup: {
          keyboard: [
            [
              { text: '–ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' },
              { text: '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úçÔ∏è', callback_data: 'leave_message' }
            ],
            [
              { text: '–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìã', callback_data: 'my_orders' },
              { text: '–ö–æ—à–∏–∫ üõí', callback_data: 'cart' }
            ]
          ],
          resize_keyboard: true
        }
      });
      return;
    }

    const newClientData = {
      userId: userId,
      username: username || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      phoneNumber: phoneNumber || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      firstName: firstName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      lastName: lastName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      orders: []
    };

    const newClient = new Clients(newClientData);

    await newClient.save();

    console.log('–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:', newClient);

    bot.sendMessage(chatId, '–î—è–∫—É—î–º–æ, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –Ω–∞—Å.', {
      reply_markup: {
        keyboard: [
          [
            { text: '–ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' },
            { text: '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úçÔ∏è', callback_data: 'leave_message' }
          ],
          [
            { text: '–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìã', callback_data: 'my_orders' },
            { text: '–ö–æ—à–∏–∫ üõí', callback_data: 'cart' }
          ]
        ],
        resize_keyboard: true
      }
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞:', error);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: {
        remove_keyboard: true
      }
    });
  }
});